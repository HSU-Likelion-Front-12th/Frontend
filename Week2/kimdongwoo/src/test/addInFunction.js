export default function addInFunction() {

  function addIn(a, b) {
    return a + b;
  }

  return { addIn }

}

//공식문서 라이프사이클 : https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
//컴포넌트의 정의 : UI를 재랜더링한다. - 공식문서 참조
//반문 : 하지만 addInFunction의 return문을 중심으로 보면 컴포넌트의 정의인 UI를 재사용하는 용도의 컴포넌트는 아니다.
//addInFunction 컴포넌트는 로직을 추상화하고 재사용 가능한 형태로 만드는 데 도움이 되는 것으로 볼 수 있습니다.
//gpt의 답변 : 리액트 공식 문서에서 컴포넌트는 일반적으로 UI를 나타내는 것으로 정의되어 있으며, 이에 따라 컴포넌트는 UI를 렌더링하는데 사용됩니다. 그러나 함수 컴포넌트 외에도 로직을 분리하고 재사용 가능한 형태로 만들기 위해 함수를 사용할 수 있습니다. 이러한 함수는 UI를 렌더링하지 않으며, 일반적으로 로직을 처리하거나 데이터를 가공하는 데 사용됩니다. 이러한 함수는 리액트 컴포넌트가 아니지만, 개발자들 사이에서 컴포넌트라는 용어를 널리 사용하여 함수 컴포넌트와 혼동될 수 있습니다. 하지만 엄밀히 말하면 이러한 함수는 리액트의 컴포넌트가 아니며, 공식적인 용어로는 컴포넌트로 간주되지 않습니다.


//그렇다면 jsx는 무엇인가?

//예시 const element = <h1>Hello, world!</h1>;
//즉, return문 또는 코드 내부에 UI를 생성해서 DOM에 접근하게 되는 코드는 곧 jsx라 보아도 무방하다.

//jsx란? React에서는 본질적으로 렌더링 로직이 UI 로직(이벤트가 처리되는 방식, 시간에 따라 state가 변하는 방식, 화면에 표시하기 위해 데이터가 준비되는 방식 등)과 연결된다는 사실을 받아들입니다. - 공식문서 참조
//반문 : 그렇다면 예시에 나와있는 'const element = <h1>Hello, world!</h1>;'이 부분이 존재하는 js는 jsx가 되어야 하는 것인가?
//반문 : 그렇지 않다. 생각해봐라, 'const element = <h1>Hello, world!</h1>;'가 존재한다는 것은 곧 DOM에 접근해서 DOM을 조작하겠다는 것 아니겠는가. 결국 해당 컴포넌트에는 return문은 jsx를 반환하고 있을 것이다. 결론적으론 위의 예시인 코드가 있는 컴포넌트는 함수 컴포넌트이며 jsx가 되는 것이다.

//결론 : 컴포넌트(통상적으로 사용되는 단어) 내부 순수 js가 존재한다면 파일 포멧은 .jsx가 아닌 .js가 되어야하고 jsx문법을 사용하고 있는 코드가 존재하는 컴포넌트(공식문서의 정의를 따른 단어)는 .jsx가 되어야한다. 즉, jsx와 js가 리액트 내에서 혼용되어 사용되는 이유는 개발자간 업무의 효율성과 업무내의 약속된 패턴을 자유로이 선택할 수 있는 환경을 제공하기 위한 페이스북의 배려라는 것을 알 수 있다.
